{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":30378,"sourceType":"datasetVersion","datasetId":23777}],"dockerImageVersionId":30823,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\nimport random\n\n# List all files\nall_files = []\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        all_files.append(os.path.join(dirname, filename))\n\n# Show 10 random files\nif all_files:\n    sample_size = min(10, len(all_files))  # In case there are fewer than 10 files\n    random_files = random.sample(all_files, sample_size)\n    \n    print(f\"\\nShowing {sample_size} random files from the input directory:\")\n    for file_path in random_files:\n        print(file_path)\nelse:\n    print(\"No files found in the input directory.\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"execution_failed":"2024-12-26T01:29:10.991Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Import required libraries\nimport os\nimport torch\nimport sys\n\n# Add the project root to Python path\nsys.path.append('/kaggle/input/chapter06-best_practice-main/pytorch/default/1/chapter06-best_practice-main')\n\n# Import your modules\nfrom config import opt\nfrom models import SqueezeNet\nfrom data.dataset import DogCat\nfrom torch.utils.data import DataLoader\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-26T00:42:48.113822Z","iopub.execute_input":"2024-12-26T00:42:48.114156Z","iopub.status.idle":"2024-12-26T00:42:48.118424Z","shell.execute_reply.started":"2024-12-26T00:42:48.114130Z","shell.execute_reply":"2024-12-26T00:42:48.117441Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# Configure paths\nopt.train_data_root = '/kaggle/input/cat-and-dog/training_set/training_set/cats'  # Update with your dataset path\nopt.test_data_root = '/kaggle/input/cat-and-dog/test_set/test_set/cast'    # Update with your dataset path\nopt.batch_size = 256\nopt.use_gpu = True if torch.cuda.is_available() else False\nopt.device = torch.device('cuda' if opt.use_gpu else 'cpu')\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-26T00:46:27.904491Z","iopub.execute_input":"2024-12-26T00:46:27.904829Z","iopub.status.idle":"2024-12-26T00:46:27.911012Z","shell.execute_reply.started":"2024-12-26T00:46:27.904800Z","shell.execute_reply":"2024-12-26T00:46:27.910106Z"}},"outputs":[{"name":"stdout","text":"Created 'checkpoints' directory\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"# Initialize model\nmodel = SqueezeNet(num_classes=2)\nmodel.to(opt.device)\n\n# Train the model\nfrom main import train\ntrain(\n    model=opt.model,\n    train_data_root=opt.train_data_root,\n    batch_size=opt.batch_size,\n    use_gpu=opt.use_gpu,\n    max_epoch=10  # Adjust as needed\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}